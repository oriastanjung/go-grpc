// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: blog.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BlogServiceRoutes_CreateOneBlog_FullMethodName = "/blog.BlogServiceRoutes/CreateOneBlog"
	BlogServiceRoutes_GetOneBlog_FullMethodName    = "/blog.BlogServiceRoutes/GetOneBlog"
	BlogServiceRoutes_UpdateOneBlog_FullMethodName = "/blog.BlogServiceRoutes/UpdateOneBlog"
	BlogServiceRoutes_DeleteOneBlog_FullMethodName = "/blog.BlogServiceRoutes/DeleteOneBlog"
	BlogServiceRoutes_GetAllBlogs_FullMethodName   = "/blog.BlogServiceRoutes/GetAllBlogs"
)

// BlogServiceRoutesClient is the client API for BlogServiceRoutes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogServiceRoutesClient interface {
	CreateOneBlog(ctx context.Context, in *Blog, opts ...grpc.CallOption) (*BlogId, error)
	GetOneBlog(ctx context.Context, in *BlogId, opts ...grpc.CallOption) (*Blog, error)
	UpdateOneBlog(ctx context.Context, in *Blog, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteOneBlog(ctx context.Context, in *BlogId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllBlogs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Blog], error)
}

type blogServiceRoutesClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogServiceRoutesClient(cc grpc.ClientConnInterface) BlogServiceRoutesClient {
	return &blogServiceRoutesClient{cc}
}

func (c *blogServiceRoutesClient) CreateOneBlog(ctx context.Context, in *Blog, opts ...grpc.CallOption) (*BlogId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlogId)
	err := c.cc.Invoke(ctx, BlogServiceRoutes_CreateOneBlog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceRoutesClient) GetOneBlog(ctx context.Context, in *BlogId, opts ...grpc.CallOption) (*Blog, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Blog)
	err := c.cc.Invoke(ctx, BlogServiceRoutes_GetOneBlog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceRoutesClient) UpdateOneBlog(ctx context.Context, in *Blog, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BlogServiceRoutes_UpdateOneBlog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceRoutesClient) DeleteOneBlog(ctx context.Context, in *BlogId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BlogServiceRoutes_DeleteOneBlog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceRoutesClient) GetAllBlogs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Blog], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BlogServiceRoutes_ServiceDesc.Streams[0], BlogServiceRoutes_GetAllBlogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, Blog]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlogServiceRoutes_GetAllBlogsClient = grpc.ServerStreamingClient[Blog]

// BlogServiceRoutesServer is the server API for BlogServiceRoutes service.
// All implementations must embed UnimplementedBlogServiceRoutesServer
// for forward compatibility.
type BlogServiceRoutesServer interface {
	CreateOneBlog(context.Context, *Blog) (*BlogId, error)
	GetOneBlog(context.Context, *BlogId) (*Blog, error)
	UpdateOneBlog(context.Context, *Blog) (*emptypb.Empty, error)
	DeleteOneBlog(context.Context, *BlogId) (*emptypb.Empty, error)
	GetAllBlogs(*emptypb.Empty, grpc.ServerStreamingServer[Blog]) error
	mustEmbedUnimplementedBlogServiceRoutesServer()
}

// UnimplementedBlogServiceRoutesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlogServiceRoutesServer struct{}

func (UnimplementedBlogServiceRoutesServer) CreateOneBlog(context.Context, *Blog) (*BlogId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneBlog not implemented")
}
func (UnimplementedBlogServiceRoutesServer) GetOneBlog(context.Context, *BlogId) (*Blog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneBlog not implemented")
}
func (UnimplementedBlogServiceRoutesServer) UpdateOneBlog(context.Context, *Blog) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneBlog not implemented")
}
func (UnimplementedBlogServiceRoutesServer) DeleteOneBlog(context.Context, *BlogId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneBlog not implemented")
}
func (UnimplementedBlogServiceRoutesServer) GetAllBlogs(*emptypb.Empty, grpc.ServerStreamingServer[Blog]) error {
	return status.Errorf(codes.Unimplemented, "method GetAllBlogs not implemented")
}
func (UnimplementedBlogServiceRoutesServer) mustEmbedUnimplementedBlogServiceRoutesServer() {}
func (UnimplementedBlogServiceRoutesServer) testEmbeddedByValue()                           {}

// UnsafeBlogServiceRoutesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogServiceRoutesServer will
// result in compilation errors.
type UnsafeBlogServiceRoutesServer interface {
	mustEmbedUnimplementedBlogServiceRoutesServer()
}

func RegisterBlogServiceRoutesServer(s grpc.ServiceRegistrar, srv BlogServiceRoutesServer) {
	// If the following call pancis, it indicates UnimplementedBlogServiceRoutesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlogServiceRoutes_ServiceDesc, srv)
}

func _BlogServiceRoutes_CreateOneBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceRoutesServer).CreateOneBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogServiceRoutes_CreateOneBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceRoutesServer).CreateOneBlog(ctx, req.(*Blog))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogServiceRoutes_GetOneBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceRoutesServer).GetOneBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogServiceRoutes_GetOneBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceRoutesServer).GetOneBlog(ctx, req.(*BlogId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogServiceRoutes_UpdateOneBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceRoutesServer).UpdateOneBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogServiceRoutes_UpdateOneBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceRoutesServer).UpdateOneBlog(ctx, req.(*Blog))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogServiceRoutes_DeleteOneBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceRoutesServer).DeleteOneBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogServiceRoutes_DeleteOneBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceRoutesServer).DeleteOneBlog(ctx, req.(*BlogId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogServiceRoutes_GetAllBlogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlogServiceRoutesServer).GetAllBlogs(m, &grpc.GenericServerStream[emptypb.Empty, Blog]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlogServiceRoutes_GetAllBlogsServer = grpc.ServerStreamingServer[Blog]

// BlogServiceRoutes_ServiceDesc is the grpc.ServiceDesc for BlogServiceRoutes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogServiceRoutes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.BlogServiceRoutes",
	HandlerType: (*BlogServiceRoutesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOneBlog",
			Handler:    _BlogServiceRoutes_CreateOneBlog_Handler,
		},
		{
			MethodName: "GetOneBlog",
			Handler:    _BlogServiceRoutes_GetOneBlog_Handler,
		},
		{
			MethodName: "UpdateOneBlog",
			Handler:    _BlogServiceRoutes_UpdateOneBlog_Handler,
		},
		{
			MethodName: "DeleteOneBlog",
			Handler:    _BlogServiceRoutes_DeleteOneBlog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllBlogs",
			Handler:       _BlogServiceRoutes_GetAllBlogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "blog.proto",
}
